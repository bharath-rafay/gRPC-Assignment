// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: test.proto

package go_assignment_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SimpleMathClient is the client API for SimpleMath service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SimpleMathClient interface {
	Add(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error)
	Sub(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error)
	Mul(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error)
	Div(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error)
}

type simpleMathClient struct {
	cc grpc.ClientConnInterface
}

func NewSimpleMathClient(cc grpc.ClientConnInterface) SimpleMathClient {
	return &simpleMathClient{cc}
}

func (c *simpleMathClient) Add(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/test_proto.SimpleMath/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathClient) Sub(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/test_proto.SimpleMath/Sub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathClient) Mul(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/test_proto.SimpleMath/Mul", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *simpleMathClient) Div(ctx context.Context, in *Number, opts ...grpc.CallOption) (*Out, error) {
	out := new(Out)
	err := c.cc.Invoke(ctx, "/test_proto.SimpleMath/Div", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SimpleMathServer is the server API for SimpleMath service.
// All implementations must embed UnimplementedSimpleMathServer
// for forward compatibility
type SimpleMathServer interface {
	Add(context.Context, *Number) (*Out, error)
	Sub(context.Context, *Number) (*Out, error)
	Mul(context.Context, *Number) (*Out, error)
	Div(context.Context, *Number) (*Out, error)
	mustEmbedUnimplementedSimpleMathServer()
}

// UnimplementedSimpleMathServer must be embedded to have forward compatible implementations.
type UnimplementedSimpleMathServer struct {
}

func (UnimplementedSimpleMathServer) Add(context.Context, *Number) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedSimpleMathServer) Sub(context.Context, *Number) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sub not implemented")
}
func (UnimplementedSimpleMathServer) Mul(context.Context, *Number) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mul not implemented")
}
func (UnimplementedSimpleMathServer) Div(context.Context, *Number) (*Out, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Div not implemented")
}
func (UnimplementedSimpleMathServer) mustEmbedUnimplementedSimpleMathServer() {}

// UnsafeSimpleMathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SimpleMathServer will
// result in compilation errors.
type UnsafeSimpleMathServer interface {
	mustEmbedUnimplementedSimpleMathServer()
}

func RegisterSimpleMathServer(s grpc.ServiceRegistrar, srv SimpleMathServer) {
	s.RegisterService(&SimpleMath_ServiceDesc, srv)
}

func _SimpleMath_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_proto.SimpleMath/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServer).Add(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMath_Sub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServer).Sub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_proto.SimpleMath/Sub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServer).Sub(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMath_Mul_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServer).Mul(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_proto.SimpleMath/Mul",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServer).Mul(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

func _SimpleMath_Div_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Number)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SimpleMathServer).Div(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test_proto.SimpleMath/Div",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SimpleMathServer).Div(ctx, req.(*Number))
	}
	return interceptor(ctx, in, info, handler)
}

// SimpleMath_ServiceDesc is the grpc.ServiceDesc for SimpleMath service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SimpleMath_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test_proto.SimpleMath",
	HandlerType: (*SimpleMathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _SimpleMath_Add_Handler,
		},
		{
			MethodName: "Sub",
			Handler:    _SimpleMath_Sub_Handler,
		},
		{
			MethodName: "Mul",
			Handler:    _SimpleMath_Mul_Handler,
		},
		{
			MethodName: "Div",
			Handler:    _SimpleMath_Div_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
